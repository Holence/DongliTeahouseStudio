# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'dongli_teahouse_studio_window.ui'
##
## Created by: Qt User Interface Compiler version 5.15.2
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide2.QtCore import *
from PySide2.QtGui import *
from PySide2.QtWidgets import *

from custom_widget import MyPlainTextEdit
from custom_widget import MyConceptLinkedFileList
from custom_widget import MyTreeWidget
from custom_widget import MyLineEditList

import resource_rc

class Ui_dongli_teahouse_studio_window(object):
    def setupUi(self, dongli_teahouse_studio_window):
        if not dongli_teahouse_studio_window.objectName():
            dongli_teahouse_studio_window.setObjectName(u"dongli_teahouse_studio_window")
        dongli_teahouse_studio_window.resize(1127, 941)
        icon = QIcon()
        icon.addFile(u":/icon/holoico.ico", QSize(), QIcon.Normal, QIcon.Off)
        dongli_teahouse_studio_window.setWindowIcon(icon)
        self.actionCreate_Concept = QAction(dongli_teahouse_studio_window)
        self.actionCreate_Concept.setObjectName(u"actionCreate_Concept")
        icon1 = QIcon()
        icon1.addFile(u":/icon/plus.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionCreate_Concept.setIcon(icon1)
        self.actionAdd_New_Line = QAction(dongli_teahouse_studio_window)
        self.actionAdd_New_Line.setObjectName(u"actionAdd_New_Line")
        icon2 = QIcon()
        icon2.addFile(u":/icon/corner-down-left.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAdd_New_Line.setIcon(icon2)
        self.actionLink_Concept_to_Line = QAction(dongli_teahouse_studio_window)
        self.actionLink_Concept_to_Line.setObjectName(u"actionLink_Concept_to_Line")
        icon3 = QIcon()
        icon3.addFile(u":/icon/link.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionLink_Concept_to_Line.setIcon(icon3)
        self.actionSave_Data = QAction(dongli_teahouse_studio_window)
        self.actionSave_Data.setObjectName(u"actionSave_Data")
        icon4 = QIcon()
        icon4.addFile(u":/icon/save.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSave_Data.setIcon(icon4)
        self.actionDelete = QAction(dongli_teahouse_studio_window)
        self.actionDelete.setObjectName(u"actionDelete")
        icon5 = QIcon()
        iconThemeName = u"Delete"
        if QIcon.hasThemeIcon(iconThemeName):
            icon5 = QIcon.fromTheme(iconThemeName)
        else:
            icon5.addFile(u":/icon/trash-2.svg", QSize(), QIcon.Normal, QIcon.Off)
        
        self.actionDelete.setIcon(icon5)
        self.actionAdd_Concept_To_Parent = QAction(dongli_teahouse_studio_window)
        self.actionAdd_Concept_To_Parent.setObjectName(u"actionAdd_Concept_To_Parent")
        icon6 = QIcon()
        icon6.addFile(u":/icon/user-plus.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAdd_Concept_To_Parent.setIcon(icon6)
        self.actionAdd_Concept_To_Child = QAction(dongli_teahouse_studio_window)
        self.actionAdd_Concept_To_Child.setObjectName(u"actionAdd_Concept_To_Child")
        self.actionAdd_Concept_To_Child.setIcon(icon6)
        self.actionAdd_Concept_To_Relative = QAction(dongli_teahouse_studio_window)
        self.actionAdd_Concept_To_Relative.setObjectName(u"actionAdd_Concept_To_Relative")
        self.actionAdd_Concept_To_Relative.setIcon(icon6)
        self.actionToggle_Fullscreen = QAction(dongli_teahouse_studio_window)
        self.actionToggle_Fullscreen.setObjectName(u"actionToggle_Fullscreen")
        icon7 = QIcon()
        icon7.addFile(u":/icon/maximize.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionToggle_Fullscreen.setIcon(icon7)
        self.actionExit = QAction(dongli_teahouse_studio_window)
        self.actionExit.setObjectName(u"actionExit")
        icon8 = QIcon()
        icon8.addFile(u":/icon/log-out.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionExit.setIcon(icon8)
        self.actionAbout = QAction(dongli_teahouse_studio_window)
        self.actionAbout.setObjectName(u"actionAbout")
        icon9 = QIcon()
        icon9.addFile(u":/icon/book.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAbout.setIcon(icon9)
        self.actionSearch_Concept = QAction(dongli_teahouse_studio_window)
        self.actionSearch_Concept.setObjectName(u"actionSearch_Concept")
        icon10 = QIcon()
        icon10.addFile(u":/icon/search.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSearch_Concept.setIcon(icon10)
        self.actionImport_File_Tree_to_Concept = QAction(dongli_teahouse_studio_window)
        self.actionImport_File_Tree_to_Concept.setObjectName(u"actionImport_File_Tree_to_Concept")
        icon11 = QIcon()
        icon11.addFile(u":/icon/download-cloud.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionImport_File_Tree_to_Concept.setIcon(icon11)
        self.actionCreate_New_Tab = QAction(dongli_teahouse_studio_window)
        self.actionCreate_New_Tab.setObjectName(u"actionCreate_New_Tab")
        icon12 = QIcon()
        icon12.addFile(u":/icon/tablet.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionCreate_New_Tab.setIcon(icon12)
        self.actionHide_Current_Tab = QAction(dongli_teahouse_studio_window)
        self.actionHide_Current_Tab.setObjectName(u"actionHide_Current_Tab")
        icon13 = QIcon()
        icon13.addFile(u":/icon/archive.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionHide_Current_Tab.setIcon(icon13)
        self.actionDelete_Current_Tab = QAction(dongli_teahouse_studio_window)
        self.actionDelete_Current_Tab.setObjectName(u"actionDelete_Current_Tab")
        icon14 = QIcon()
        icon14.addFile(u":/icon/trash-2.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionDelete_Current_Tab.setIcon(icon14)
        self.actionCreate_RSS_Folder = QAction(dongli_teahouse_studio_window)
        self.actionCreate_RSS_Folder.setObjectName(u"actionCreate_RSS_Folder")
        icon15 = QIcon()
        icon15.addFile(u":/icon/folder.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionCreate_RSS_Folder.setIcon(icon15)
        self.actionAdd_RSS_Feed = QAction(dongli_teahouse_studio_window)
        self.actionAdd_RSS_Feed.setObjectName(u"actionAdd_RSS_Feed")
        icon16 = QIcon()
        icon16.addFile(u":/icon/rss.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAdd_RSS_Feed.setIcon(icon16)
        self.actionOpen_WebPage_In_Browser = QAction(dongli_teahouse_studio_window)
        self.actionOpen_WebPage_In_Browser.setObjectName(u"actionOpen_WebPage_In_Browser")
        icon17 = QIcon()
        icon17.addFile(u":/icon/airplay.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionOpen_WebPage_In_Browser.setIcon(icon17)
        self.actionExport_Concept_Data_to_Json = QAction(dongli_teahouse_studio_window)
        self.actionExport_Concept_Data_to_Json.setObjectName(u"actionExport_Concept_Data_to_Json")
        icon18 = QIcon()
        icon18.addFile(u":/icon/upload.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionExport_Concept_Data_to_Json.setIcon(icon18)
        self.actionExport_Diary_Data_to_Json = QAction(dongli_teahouse_studio_window)
        self.actionExport_Diary_Data_to_Json.setObjectName(u"actionExport_Diary_Data_to_Json")
        self.actionExport_Diary_Data_to_Json.setIcon(icon18)
        self.actionExport_RSS_Data_to_Json = QAction(dongli_teahouse_studio_window)
        self.actionExport_RSS_Data_to_Json.setObjectName(u"actionExport_RSS_Data_to_Json")
        self.actionExport_RSS_Data_to_Json.setIcon(icon18)
        self.actionSetting = QAction(dongli_teahouse_studio_window)
        self.actionSetting.setObjectName(u"actionSetting")
        icon19 = QIcon()
        icon19.addFile(u":/icon/settings.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSetting.setIcon(icon19)
        self.actionFile_Check = QAction(dongli_teahouse_studio_window)
        self.actionFile_Check.setObjectName(u"actionFile_Check")
        icon20 = QIcon()
        icon20.addFile(u":/icon/shield.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionFile_Check.setIcon(icon20)
        self.actionExport_File_Data_to_Json = QAction(dongli_teahouse_studio_window)
        self.actionExport_File_Data_to_Json.setObjectName(u"actionExport_File_Data_to_Json")
        self.actionExport_File_Data_to_Json.setIcon(icon18)
        self.actionEdit = QAction(dongli_teahouse_studio_window)
        self.actionEdit.setObjectName(u"actionEdit")
        icon21 = QIcon()
        icon21.addFile(u":/icon/edit-3.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionEdit.setIcon(icon21)
        self.actionUpdate_Feed_Manually = QAction(dongli_teahouse_studio_window)
        self.actionUpdate_Feed_Manually.setObjectName(u"actionUpdate_Feed_Manually")
        icon22 = QIcon()
        icon22.addFile(u":/icon/refresh-cw.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionUpdate_Feed_Manually.setIcon(icon22)
        self.actionSearch_Diary_Text = QAction(dongli_teahouse_studio_window)
        self.actionSearch_Diary_Text.setObjectName(u"actionSearch_Diary_Text")
        self.actionSearch_Diary_Text.setIcon(icon10)
        self.actionSearch_File_Library = QAction(dongli_teahouse_studio_window)
        self.actionSearch_File_Library.setObjectName(u"actionSearch_File_Library")
        self.actionSearch_File_Library.setIcon(icon10)
        self.actionLocate_File_in_File_Library = QAction(dongli_teahouse_studio_window)
        self.actionLocate_File_in_File_Library.setObjectName(u"actionLocate_File_in_File_Library")
        icon23 = QIcon()
        icon23.addFile(u":/icon/navigation.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionLocate_File_in_File_Library.setIcon(icon23)
        self.actionExport_RSS_Tree_Data_to_Json = QAction(dongli_teahouse_studio_window)
        self.actionExport_RSS_Tree_Data_to_Json.setObjectName(u"actionExport_RSS_Tree_Data_to_Json")
        self.actionExport_RSS_Tree_Data_to_Json.setIcon(icon18)
        self.actionStay_on_Top = QAction(dongli_teahouse_studio_window)
        self.actionStay_on_Top.setObjectName(u"actionStay_on_Top")
        icon24 = QIcon()
        icon24.addFile(u":/icon/arrow-up.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionStay_on_Top.setIcon(icon24)
        self.actionAnalyze_Diary_with_Concept = QAction(dongli_teahouse_studio_window)
        self.actionAnalyze_Diary_with_Concept.setObjectName(u"actionAnalyze_Diary_with_Concept")
        icon25 = QIcon()
        icon25.addFile(u":/icon/aperture.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAnalyze_Diary_with_Concept.setIcon(icon25)
        self.actionStart_Daily_Update_Manually = QAction(dongli_teahouse_studio_window)
        self.actionStart_Daily_Update_Manually.setObjectName(u"actionStart_Daily_Update_Manually")
        self.actionStart_Daily_Update_Manually.setIcon(icon22)
        self.actionCreate_Zen_Folder = QAction(dongli_teahouse_studio_window)
        self.actionCreate_Zen_Folder.setObjectName(u"actionCreate_Zen_Folder")
        self.actionCreate_Zen_Folder.setIcon(icon15)
        self.actionAdd_Zen_Segment = QAction(dongli_teahouse_studio_window)
        self.actionAdd_Zen_Segment.setObjectName(u"actionAdd_Zen_Segment")
        icon26 = QIcon()
        icon26.addFile(u":/icon/star.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAdd_Zen_Segment.setIcon(icon26)
        self.actionSwitch_between_View_Edit = QAction(dongli_teahouse_studio_window)
        self.actionSwitch_between_View_Edit.setObjectName(u"actionSwitch_between_View_Edit")
        icon27 = QIcon()
        icon27.addFile(u":/icon/toggle-left.svg", QSize(), QIcon.Normal, QIcon.Off)
        icon27.addFile(u":/icon/toggle-right.svg", QSize(), QIcon.Normal, QIcon.On)
        self.actionSwitch_between_View_Edit.setIcon(icon27)
        self.actionExport_Zen_Data_to_Json = QAction(dongli_teahouse_studio_window)
        self.actionExport_Zen_Data_to_Json.setObjectName(u"actionExport_Zen_Data_to_Json")
        self.actionExport_Zen_Data_to_Json.setIcon(icon18)
        self.actionExport_Zen_Tree_Data_to_Json = QAction(dongli_teahouse_studio_window)
        self.actionExport_Zen_Tree_Data_to_Json.setObjectName(u"actionExport_Zen_Tree_Data_to_Json")
        self.actionExport_Zen_Tree_Data_to_Json.setIcon(icon18)
        self.centralwidget = QWidget(dongli_teahouse_studio_window)
        self.centralwidget.setObjectName(u"centralwidget")
        self.verticalLayout_8 = QVBoxLayout(self.centralwidget)
        self.verticalLayout_8.setObjectName(u"verticalLayout_8")
        self.tabWidget = QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName(u"tabWidget")
        self.tabWidget.setMinimumSize(QSize(200, 0))
        self.tabWidget.setTabShape(QTabWidget.Rounded)
        self.tabWidget.setIconSize(QSize(16, 16))
        self.tabWidget.setDocumentMode(False)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(True)
        self.tabWidget.setTabBarAutoHide(False)
        self.tabWidgetPage_home = QWidget()
        self.tabWidgetPage_home.setObjectName(u"tabWidgetPage_home")
        self.verticalLayout_10 = QVBoxLayout(self.tabWidgetPage_home)
        self.verticalLayout_10.setSpacing(0)
        self.verticalLayout_10.setObjectName(u"verticalLayout_10")
        self.verticalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.label_home = QLabel(self.tabWidgetPage_home)
        self.label_home.setObjectName(u"label_home")
        sizePolicy = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_home.sizePolicy().hasHeightForWidth())
        self.label_home.setSizePolicy(sizePolicy)
        self.label_home.setMinimumSize(QSize(0, 0))
        font = QFont()
        font.setFamily(u"1529 Champ Fleury Pro")
        font.setPointSize(52)
        self.label_home.setFont(font)
        self.label_home.setAlignment(Qt.AlignBottom|Qt.AlignHCenter)

        self.verticalLayout_10.addWidget(self.label_home)

        self.label = QLabel(self.tabWidgetPage_home)
        self.label.setObjectName(u"label")
        font1 = QFont()
        font1.setFamily(u"1529 Champ Fleury Pro")
        font1.setPointSize(24)
        font1.setBold(False)
        font1.setWeight(50)
        self.label.setFont(font1)
        self.label.setAlignment(Qt.AlignHCenter|Qt.AlignTop)

        self.verticalLayout_10.addWidget(self.label)

        icon28 = QIcon()
        icon28.addFile(u":/icon/home.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.tabWidget.addTab(self.tabWidgetPage_home, icon28, "")
        self.tabWidgetPage_rss = QWidget()
        self.tabWidgetPage_rss.setObjectName(u"tabWidgetPage_rss")
        self.horizontalLayout_3 = QHBoxLayout(self.tabWidgetPage_rss)
        self.horizontalLayout_3.setObjectName(u"horizontalLayout_3")
        self.splitter_rss = QSplitter(self.tabWidgetPage_rss)
        self.splitter_rss.setObjectName(u"splitter_rss")
        self.splitter_rss.setOrientation(Qt.Horizontal)
        self.splitter_rss.setHandleWidth(10)
        self.layoutWidget = QWidget(self.splitter_rss)
        self.layoutWidget.setObjectName(u"layoutWidget")
        self.verticalLayout = QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.lineEdit_rss_search = QLineEdit(self.layoutWidget)
        self.lineEdit_rss_search.setObjectName(u"lineEdit_rss_search")

        self.verticalLayout.addWidget(self.lineEdit_rss_search)

        self.treeWidget_rss = MyTreeWidget(self.layoutWidget)
        self.treeWidget_rss.setObjectName(u"treeWidget_rss")
        self.treeWidget_rss.setTabKeyNavigation(True)
        self.treeWidget_rss.setDragEnabled(True)
        self.treeWidget_rss.setDragDropMode(QAbstractItemView.InternalMove)
        self.treeWidget_rss.setAlternatingRowColors(False)
        self.treeWidget_rss.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.treeWidget_rss.setAutoExpandDelay(750)
        self.treeWidget_rss.setIndentation(20)
        self.treeWidget_rss.setRootIsDecorated(True)
        self.treeWidget_rss.setUniformRowHeights(False)
        self.treeWidget_rss.setItemsExpandable(True)
        self.treeWidget_rss.setSortingEnabled(False)
        self.treeWidget_rss.setAnimated(True)
        self.treeWidget_rss.setAllColumnsShowFocus(False)
        self.treeWidget_rss.header().setVisible(False)

        self.verticalLayout.addWidget(self.treeWidget_rss)

        self.splitter_rss.addWidget(self.layoutWidget)
        self.listWidget_rss = QListWidget(self.splitter_rss)
        self.listWidget_rss.setObjectName(u"listWidget_rss")
        self.listWidget_rss.setProperty("isWrapping", False)
        self.listWidget_rss.setSpacing(10)
        self.listWidget_rss.setWordWrap(True)
        self.splitter_rss.addWidget(self.listWidget_rss)

        self.horizontalLayout_3.addWidget(self.splitter_rss)

        self.tabWidget.addTab(self.tabWidgetPage_rss, icon16, "")
        self.tabWidgetPage_text = QWidget()
        self.tabWidgetPage_text.setObjectName(u"tabWidgetPage_text")
        self.horizontalLayout_2 = QHBoxLayout(self.tabWidgetPage_text)
        self.horizontalLayout_2.setObjectName(u"horizontalLayout_2")
        self.textEdit_viewer = QTextEdit(self.tabWidgetPage_text)
        self.textEdit_viewer.setObjectName(u"textEdit_viewer")
        self.textEdit_viewer.setReadOnly(True)

        self.horizontalLayout_2.addWidget(self.textEdit_viewer)

        icon29 = QIcon()
        icon29.addFile(u":/icon/book-open.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.tabWidget.addTab(self.tabWidgetPage_text, icon29, "")
        self.tabWidgetPage_zen = QWidget()
        self.tabWidgetPage_zen.setObjectName(u"tabWidgetPage_zen")
        self.horizontalLayout_6 = QHBoxLayout(self.tabWidgetPage_zen)
        self.horizontalLayout_6.setObjectName(u"horizontalLayout_6")
        self.splitter_zen = QSplitter(self.tabWidgetPage_zen)
        self.splitter_zen.setObjectName(u"splitter_zen")
        self.splitter_zen.setOrientation(Qt.Horizontal)
        self.splitter_zen.setHandleWidth(10)
        self.widget = QWidget(self.splitter_zen)
        self.widget.setObjectName(u"widget")
        self.verticalLayout_9 = QVBoxLayout(self.widget)
        self.verticalLayout_9.setObjectName(u"verticalLayout_9")
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.lineEdit_zen_search = QLineEdit(self.widget)
        self.lineEdit_zen_search.setObjectName(u"lineEdit_zen_search")

        self.verticalLayout_9.addWidget(self.lineEdit_zen_search)

        self.treeWidget_zen = MyTreeWidget(self.widget)
        self.treeWidget_zen.setObjectName(u"treeWidget_zen")
        self.treeWidget_zen.setTabKeyNavigation(True)
        self.treeWidget_zen.setDragEnabled(True)
        self.treeWidget_zen.setDragDropMode(QAbstractItemView.InternalMove)
        self.treeWidget_zen.setAlternatingRowColors(False)
        self.treeWidget_zen.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.treeWidget_zen.setAutoExpandDelay(750)
        self.treeWidget_zen.setIndentation(20)
        self.treeWidget_zen.setRootIsDecorated(True)
        self.treeWidget_zen.setUniformRowHeights(False)
        self.treeWidget_zen.setItemsExpandable(True)
        self.treeWidget_zen.setSortingEnabled(False)
        self.treeWidget_zen.setAnimated(True)
        self.treeWidget_zen.setAllColumnsShowFocus(False)
        self.treeWidget_zen.header().setVisible(False)

        self.verticalLayout_9.addWidget(self.treeWidget_zen)

        self.splitter_zen.addWidget(self.widget)
        self.stackedWidget_zen = QStackedWidget(self.splitter_zen)
        self.stackedWidget_zen.setObjectName(u"stackedWidget_zen")
        self.page_3 = QWidget()
        self.page_3.setObjectName(u"page_3")
        self.horizontalLayout_4 = QHBoxLayout(self.page_3)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName(u"horizontalLayout_4")
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.textEdit_viewer_zen = QTextBrowser(self.page_3)
        self.textEdit_viewer_zen.setObjectName(u"textEdit_viewer_zen")
        self.textEdit_viewer_zen.setReadOnly(True)
        self.textEdit_viewer_zen.setTextInteractionFlags(Qt.LinksAccessibleByMouse|Qt.TextSelectableByMouse)
        self.textEdit_viewer_zen.setOpenExternalLinks(True)

        self.horizontalLayout_4.addWidget(self.textEdit_viewer_zen)

        self.stackedWidget_zen.addWidget(self.page_3)
        self.page_4 = QWidget()
        self.page_4.setObjectName(u"page_4")
        self.horizontalLayout_5 = QHBoxLayout(self.page_4)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName(u"horizontalLayout_5")
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.plainTextEdit_zen = MyPlainTextEdit(self.page_4)
        self.plainTextEdit_zen.setObjectName(u"plainTextEdit_zen")

        self.horizontalLayout_5.addWidget(self.plainTextEdit_zen)

        self.stackedWidget_zen.addWidget(self.page_4)
        self.splitter_zen.addWidget(self.stackedWidget_zen)

        self.horizontalLayout_6.addWidget(self.splitter_zen)

        icon30 = QIcon()
        icon30.addFile(u":/icon/moon.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.tabWidget.addTab(self.tabWidgetPage_zen, icon30, "")

        self.verticalLayout_8.addWidget(self.tabWidget)

        dongli_teahouse_studio_window.setCentralWidget(self.centralwidget)
        self.dockWidget_diary = QDockWidget(dongli_teahouse_studio_window)
        self.dockWidget_diary.setObjectName(u"dockWidget_diary")
        self.dockWidget_diary.setMinimumSize(QSize(292, 593))
        self.dockWidget_diary.setFeatures(QDockWidget.AllDockWidgetFeatures)
        self.dockWidgetContents_6 = QWidget()
        self.dockWidgetContents_6.setObjectName(u"dockWidgetContents_6")
        self.verticalLayout_3 = QVBoxLayout(self.dockWidgetContents_6)
        self.verticalLayout_3.setObjectName(u"verticalLayout_3")
        self.verticalLayout_1 = QVBoxLayout()
        self.verticalLayout_1.setObjectName(u"verticalLayout_1")
        self.splitter_text = QSplitter(self.dockWidgetContents_6)
        self.splitter_text.setObjectName(u"splitter_text")
        self.splitter_text.setOrientation(Qt.Vertical)
        self.splitter_text.setHandleWidth(10)
        self.calendarWidget = QCalendarWidget(self.splitter_text)
        self.calendarWidget.setObjectName(u"calendarWidget")
        sizePolicy1 = QSizePolicy(QSizePolicy.Preferred, QSizePolicy.Fixed)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.calendarWidget.sizePolicy().hasHeightForWidth())
        self.calendarWidget.setSizePolicy(sizePolicy1)
        self.calendarWidget.setMinimumSize(QSize(270, 0))
        self.calendarWidget.setMaximumSize(QSize(16777215, 270))
        self.calendarWidget.setLayoutDirection(Qt.LeftToRight)
        self.calendarWidget.setMinimumDate(QDate(1970, 1, 1))
        self.calendarWidget.setMaximumDate(QDate(2169, 12, 31))
        self.calendarWidget.setGridVisible(True)
        self.calendarWidget.setSelectionMode(QCalendarWidget.SingleSelection)
        self.calendarWidget.setHorizontalHeaderFormat(QCalendarWidget.ShortDayNames)
        self.calendarWidget.setVerticalHeaderFormat(QCalendarWidget.ISOWeekNumbers)
        self.calendarWidget.setNavigationBarVisible(True)
        self.calendarWidget.setDateEditEnabled(True)
        self.splitter_text.addWidget(self.calendarWidget)
        self.plainTextEdit_single_line = MyPlainTextEdit(self.splitter_text)
        self.plainTextEdit_single_line.setObjectName(u"plainTextEdit_single_line")
        self.plainTextEdit_single_line.setEnabled(False)
        self.plainTextEdit_single_line.setMinimumSize(QSize(270, 0))
        self.splitter_text.addWidget(self.plainTextEdit_single_line)
        self.listWidget_lines = MyLineEditList(self.splitter_text)
        self.listWidget_lines.setObjectName(u"listWidget_lines")
        self.listWidget_lines.setMinimumSize(QSize(270, 0))
        self.listWidget_lines.setDragEnabled(True)
        self.listWidget_lines.setDragDropMode(QAbstractItemView.InternalMove)
        self.listWidget_lines.setDefaultDropAction(Qt.MoveAction)
        self.listWidget_lines.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.listWidget_lines.setSpacing(10)
        self.listWidget_lines.setWordWrap(True)
        self.listWidget_lines.setSelectionRectVisible(True)
        self.splitter_text.addWidget(self.listWidget_lines)
        self.toolBox_text = QToolBox(self.splitter_text)
        self.toolBox_text.setObjectName(u"toolBox_text")
        self.toolBox_text.setLayoutDirection(Qt.LeftToRight)
        self.toolBox_text.setFrameShape(QFrame.NoFrame)
        self.toolBox_text.setFrameShadow(QFrame.Plain)
        self.page_text_related_concept = QWidget()
        self.page_text_related_concept.setObjectName(u"page_text_related_concept")
        self.page_text_related_concept.setGeometry(QRect(0, 0, 272, 158))
        self.horizontalLayout_8 = QHBoxLayout(self.page_text_related_concept)
        self.horizontalLayout_8.setObjectName(u"horizontalLayout_8")
        self.listWidget_text_related_concept = QListWidget(self.page_text_related_concept)
        self.listWidget_text_related_concept.setObjectName(u"listWidget_text_related_concept")
        self.listWidget_text_related_concept.setDragEnabled(False)
        self.listWidget_text_related_concept.setDragDropOverwriteMode(False)
        self.listWidget_text_related_concept.setDragDropMode(QAbstractItemView.InternalMove)
        self.listWidget_text_related_concept.setDefaultDropAction(Qt.MoveAction)
        self.listWidget_text_related_concept.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.listWidget_text_related_concept.setMovement(QListView.Free)
        self.listWidget_text_related_concept.setFlow(QListView.LeftToRight)
        self.listWidget_text_related_concept.setResizeMode(QListView.Adjust)
        self.listWidget_text_related_concept.setSpacing(5)
        self.listWidget_text_related_concept.setViewMode(QListView.IconMode)
        self.listWidget_text_related_concept.setWordWrap(False)
        self.listWidget_text_related_concept.setSelectionRectVisible(True)

        self.horizontalLayout_8.addWidget(self.listWidget_text_related_concept)

        icon31 = QIcon()
        icon31.addFile(u":/icon/bookmark.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.toolBox_text.addItem(self.page_text_related_concept, icon31, u"Text Related Concept")
        self.page_text_linked_file = QWidget()
        self.page_text_linked_file.setObjectName(u"page_text_linked_file")
        self.page_text_linked_file.setGeometry(QRect(0, 0, 272, 158))
        self.horizontalLayout_7 = QHBoxLayout(self.page_text_linked_file)
        self.horizontalLayout_7.setObjectName(u"horizontalLayout_7")
        self.listWidget_text_linked_file = MyConceptLinkedFileList(self.page_text_linked_file)
        self.listWidget_text_linked_file.setObjectName(u"listWidget_text_linked_file")
        self.listWidget_text_linked_file.setMinimumSize(QSize(0, 0))
        self.listWidget_text_linked_file.setProperty("showDropIndicator", False)
        self.listWidget_text_linked_file.setDragEnabled(True)
        self.listWidget_text_linked_file.setDragDropMode(QAbstractItemView.InternalMove)
        self.listWidget_text_linked_file.setDefaultDropAction(Qt.CopyAction)
        self.listWidget_text_linked_file.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.listWidget_text_linked_file.setIconSize(QSize(48, 48))
        self.listWidget_text_linked_file.setMovement(QListView.Free)
        self.listWidget_text_linked_file.setFlow(QListView.LeftToRight)
        self.listWidget_text_linked_file.setResizeMode(QListView.Adjust)
        self.listWidget_text_linked_file.setLayoutMode(QListView.SinglePass)
        self.listWidget_text_linked_file.setSpacing(16)
        self.listWidget_text_linked_file.setGridSize(QSize(96, 128))
        self.listWidget_text_linked_file.setViewMode(QListView.IconMode)
        self.listWidget_text_linked_file.setWordWrap(True)
        self.listWidget_text_linked_file.setSelectionRectVisible(True)

        self.horizontalLayout_7.addWidget(self.listWidget_text_linked_file)

        icon32 = QIcon()
        icon32.addFile(u":/icon/file.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.toolBox_text.addItem(self.page_text_linked_file, icon32, u"Text Linked File")
        self.splitter_text.addWidget(self.toolBox_text)

        self.verticalLayout_1.addWidget(self.splitter_text)


        self.verticalLayout_3.addLayout(self.verticalLayout_1)

        self.dockWidget_diary.setWidget(self.dockWidgetContents_6)
        dongli_teahouse_studio_window.addDockWidget(Qt.RightDockWidgetArea, self.dockWidget_diary)
        self.dockWidget_concept = QDockWidget(dongli_teahouse_studio_window)
        self.dockWidget_concept.setObjectName(u"dockWidget_concept")
        sizePolicy.setHeightForWidth(self.dockWidget_concept.sizePolicy().hasHeightForWidth())
        self.dockWidget_concept.setSizePolicy(sizePolicy)
        self.dockWidget_concept.setMinimumSize(QSize(290, 751))
        self.dockWidget_concept.setFeatures(QDockWidget.AllDockWidgetFeatures)
        self.dockWidgetContents_7 = QWidget()
        self.dockWidgetContents_7.setObjectName(u"dockWidgetContents_7")
        self.verticalLayout_4 = QVBoxLayout(self.dockWidgetContents_7)
        self.verticalLayout_4.setObjectName(u"verticalLayout_4")
        self.splitter_concept = QSplitter(self.dockWidgetContents_7)
        self.splitter_concept.setObjectName(u"splitter_concept")
        self.splitter_concept.setOrientation(Qt.Vertical)
        self.splitter_concept.setHandleWidth(10)
        self.layoutWidget3 = QWidget(self.splitter_concept)
        self.layoutWidget3.setObjectName(u"layoutWidget3")
        self.verticalLayout_2 = QVBoxLayout(self.layoutWidget3)
        self.verticalLayout_2.setObjectName(u"verticalLayout_2")
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.lineEdit_search_concept = QLineEdit(self.layoutWidget3)
        self.lineEdit_search_concept.setObjectName(u"lineEdit_search_concept")
        self.lineEdit_search_concept.setMinimumSize(QSize(270, 0))

        self.verticalLayout_2.addWidget(self.lineEdit_search_concept)

        self.listWidget_search_concept = QListWidget(self.layoutWidget3)
        self.listWidget_search_concept.setObjectName(u"listWidget_search_concept")
        self.listWidget_search_concept.setMinimumSize(QSize(270, 0))
        self.listWidget_search_concept.setDragEnabled(True)
        self.listWidget_search_concept.setDragDropOverwriteMode(False)
        self.listWidget_search_concept.setDragDropMode(QAbstractItemView.InternalMove)
        self.listWidget_search_concept.setDefaultDropAction(Qt.MoveAction)
        self.listWidget_search_concept.setSpacing(5)

        self.verticalLayout_2.addWidget(self.listWidget_search_concept)

        self.splitter_concept.addWidget(self.layoutWidget3)
        self.layoutWidget1 = QWidget(self.splitter_concept)
        self.layoutWidget1.setObjectName(u"layoutWidget1")
        self.formLayout = QFormLayout(self.layoutWidget1)
        self.formLayout.setObjectName(u"formLayout")
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.label_id = QLabel(self.layoutWidget1)
        self.label_id.setObjectName(u"label_id")

        self.formLayout.setWidget(0, QFormLayout.LabelRole, self.label_id)

        self.lineEdit_id = QLineEdit(self.layoutWidget1)
        self.lineEdit_id.setObjectName(u"lineEdit_id")
        self.lineEdit_id.setEnabled(True)
        self.lineEdit_id.setMinimumSize(QSize(0, 0))
        self.lineEdit_id.setReadOnly(True)

        self.formLayout.setWidget(0, QFormLayout.FieldRole, self.lineEdit_id)

        self.label_name = QLabel(self.layoutWidget1)
        self.label_name.setObjectName(u"label_name")
        sizePolicy.setHeightForWidth(self.label_name.sizePolicy().hasHeightForWidth())
        self.label_name.setSizePolicy(sizePolicy)

        self.formLayout.setWidget(1, QFormLayout.LabelRole, self.label_name)

        self.lineEdit_name = QLineEdit(self.layoutWidget1)
        self.lineEdit_name.setObjectName(u"lineEdit_name")
        self.lineEdit_name.setMinimumSize(QSize(0, 0))
        self.lineEdit_name.setDragEnabled(False)
        self.lineEdit_name.setReadOnly(False)
        self.lineEdit_name.setClearButtonEnabled(False)

        self.formLayout.setWidget(1, QFormLayout.FieldRole, self.lineEdit_name)

        self.label_detail = QLabel(self.layoutWidget1)
        self.label_detail.setObjectName(u"label_detail")
        sizePolicy.setHeightForWidth(self.label_detail.sizePolicy().hasHeightForWidth())
        self.label_detail.setSizePolicy(sizePolicy)

        self.formLayout.setWidget(2, QFormLayout.LabelRole, self.label_detail)

        self.plainTextEdit_detail = MyPlainTextEdit(self.layoutWidget1)
        self.plainTextEdit_detail.setObjectName(u"plainTextEdit_detail")
        self.plainTextEdit_detail.setEnabled(True)
        sizePolicy2 = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Minimum)
        sizePolicy2.setHorizontalStretch(0)
        sizePolicy2.setVerticalStretch(0)
        sizePolicy2.setHeightForWidth(self.plainTextEdit_detail.sizePolicy().hasHeightForWidth())
        self.plainTextEdit_detail.setSizePolicy(sizePolicy2)
        self.plainTextEdit_detail.setMinimumSize(QSize(0, 0))
        self.plainTextEdit_detail.setMaximumSize(QSize(16777215, 16777215))
        self.plainTextEdit_detail.setReadOnly(False)

        self.formLayout.setWidget(2, QFormLayout.FieldRole, self.plainTextEdit_detail)

        self.label_parent = QLabel(self.layoutWidget1)
        self.label_parent.setObjectName(u"label_parent")

        self.formLayout.setWidget(3, QFormLayout.LabelRole, self.label_parent)

        self.listWidget_parent = QListWidget(self.layoutWidget1)
        self.listWidget_parent.setObjectName(u"listWidget_parent")
        sizePolicy3 = QSizePolicy(QSizePolicy.Expanding, QSizePolicy.Maximum)
        sizePolicy3.setHorizontalStretch(0)
        sizePolicy3.setVerticalStretch(0)
        sizePolicy3.setHeightForWidth(self.listWidget_parent.sizePolicy().hasHeightForWidth())
        self.listWidget_parent.setSizePolicy(sizePolicy3)
        self.listWidget_parent.setMinimumSize(QSize(0, 0))
        self.listWidget_parent.setProperty("showDropIndicator", False)
        self.listWidget_parent.setDragDropMode(QAbstractItemView.NoDragDrop)
        self.listWidget_parent.setDefaultDropAction(Qt.IgnoreAction)
        self.listWidget_parent.setMovement(QListView.Static)
        self.listWidget_parent.setFlow(QListView.LeftToRight)
        self.listWidget_parent.setResizeMode(QListView.Adjust)
        self.listWidget_parent.setSpacing(5)
        self.listWidget_parent.setViewMode(QListView.IconMode)
        self.listWidget_parent.setSelectionRectVisible(False)

        self.formLayout.setWidget(3, QFormLayout.FieldRole, self.listWidget_parent)

        self.label_child = QLabel(self.layoutWidget1)
        self.label_child.setObjectName(u"label_child")

        self.formLayout.setWidget(4, QFormLayout.LabelRole, self.label_child)

        self.listWidget_child = QListWidget(self.layoutWidget1)
        self.listWidget_child.setObjectName(u"listWidget_child")
        sizePolicy3.setHeightForWidth(self.listWidget_child.sizePolicy().hasHeightForWidth())
        self.listWidget_child.setSizePolicy(sizePolicy3)
        self.listWidget_child.setMinimumSize(QSize(0, 0))
        self.listWidget_child.setProperty("showDropIndicator", False)
        self.listWidget_child.setDragDropMode(QAbstractItemView.NoDragDrop)
        self.listWidget_child.setDefaultDropAction(Qt.IgnoreAction)
        self.listWidget_child.setMovement(QListView.Static)
        self.listWidget_child.setResizeMode(QListView.Adjust)
        self.listWidget_child.setSpacing(5)
        self.listWidget_child.setViewMode(QListView.IconMode)
        self.listWidget_child.setSelectionRectVisible(False)

        self.formLayout.setWidget(4, QFormLayout.FieldRole, self.listWidget_child)

        self.label_relative = QLabel(self.layoutWidget1)
        self.label_relative.setObjectName(u"label_relative")

        self.formLayout.setWidget(5, QFormLayout.LabelRole, self.label_relative)

        self.listWidget_relative = QListWidget(self.layoutWidget1)
        self.listWidget_relative.setObjectName(u"listWidget_relative")
        sizePolicy3.setHeightForWidth(self.listWidget_relative.sizePolicy().hasHeightForWidth())
        self.listWidget_relative.setSizePolicy(sizePolicy3)
        self.listWidget_relative.setMinimumSize(QSize(0, 0))
        self.listWidget_relative.setProperty("showDropIndicator", False)
        self.listWidget_relative.setDragDropMode(QAbstractItemView.NoDragDrop)
        self.listWidget_relative.setDefaultDropAction(Qt.IgnoreAction)
        self.listWidget_relative.setSelectionMode(QAbstractItemView.SingleSelection)
        self.listWidget_relative.setMovement(QListView.Static)
        self.listWidget_relative.setFlow(QListView.LeftToRight)
        self.listWidget_relative.setResizeMode(QListView.Adjust)
        self.listWidget_relative.setLayoutMode(QListView.SinglePass)
        self.listWidget_relative.setSpacing(5)
        self.listWidget_relative.setViewMode(QListView.IconMode)
        self.listWidget_relative.setWordWrap(False)
        self.listWidget_relative.setSelectionRectVisible(False)

        self.formLayout.setWidget(5, QFormLayout.FieldRole, self.listWidget_relative)

        self.splitter_concept.addWidget(self.layoutWidget1)
        self.toolBox_concept = QToolBox(self.splitter_concept)
        self.toolBox_concept.setObjectName(u"toolBox_concept")
        self.page_concept_related_text = QWidget()
        self.page_concept_related_text.setObjectName(u"page_concept_related_text")
        self.page_concept_related_text.setGeometry(QRect(0, 0, 258, 88))
        self.horizontalLayout_9 = QHBoxLayout(self.page_concept_related_text)
        self.horizontalLayout_9.setObjectName(u"horizontalLayout_9")
        self.listWidget_concept_related_text = QListWidget(self.page_concept_related_text)
        self.listWidget_concept_related_text.setObjectName(u"listWidget_concept_related_text")
        self.listWidget_concept_related_text.setMinimumSize(QSize(220, 0))
        self.listWidget_concept_related_text.setDragDropMode(QAbstractItemView.InternalMove)
        self.listWidget_concept_related_text.setDefaultDropAction(Qt.MoveAction)
        self.listWidget_concept_related_text.setSpacing(10)
        self.listWidget_concept_related_text.setWordWrap(True)

        self.horizontalLayout_9.addWidget(self.listWidget_concept_related_text)

        icon33 = QIcon()
        icon33.addFile(u":/icon/file-text.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.toolBox_concept.addItem(self.page_concept_related_text, icon33, u"Concept Related Text")
        self.page_concept_linked_file = QWidget()
        self.page_concept_linked_file.setObjectName(u"page_concept_linked_file")
        self.page_concept_linked_file.setGeometry(QRect(0, 0, 258, 88))
        self.horizontalLayout_10 = QHBoxLayout(self.page_concept_linked_file)
        self.horizontalLayout_10.setObjectName(u"horizontalLayout_10")
        self.listWidget_concept_linked_file = MyConceptLinkedFileList(self.page_concept_linked_file)
        self.listWidget_concept_linked_file.setObjectName(u"listWidget_concept_linked_file")
        self.listWidget_concept_linked_file.setDragEnabled(True)
        self.listWidget_concept_linked_file.setDragDropMode(QAbstractItemView.InternalMove)
        self.listWidget_concept_linked_file.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.listWidget_concept_linked_file.setIconSize(QSize(48, 48))
        self.listWidget_concept_linked_file.setResizeMode(QListView.Adjust)
        self.listWidget_concept_linked_file.setSpacing(16)
        self.listWidget_concept_linked_file.setGridSize(QSize(96, 128))
        self.listWidget_concept_linked_file.setViewMode(QListView.IconMode)
        self.listWidget_concept_linked_file.setWordWrap(True)

        self.horizontalLayout_10.addWidget(self.listWidget_concept_linked_file)

        self.toolBox_concept.addItem(self.page_concept_linked_file, icon32, u"Concept Linked File")
        self.splitter_concept.addWidget(self.toolBox_concept)

        self.verticalLayout_4.addWidget(self.splitter_concept)

        self.dockWidget_concept.setWidget(self.dockWidgetContents_7)
        dongli_teahouse_studio_window.addDockWidget(Qt.LeftDockWidgetArea, self.dockWidget_concept)
        self.dockWidget_library = QDockWidget(dongli_teahouse_studio_window)
        self.dockWidget_library.setObjectName(u"dockWidget_library")
        self.dockWidget_library.setFloating(False)
        self.dockWidget_library.setAllowedAreas(Qt.AllDockWidgetAreas)
        self.dockWidgetContents = QWidget()
        self.dockWidgetContents.setObjectName(u"dockWidgetContents")
        self.verticalLayout_6 = QVBoxLayout(self.dockWidgetContents)
        self.verticalLayout_6.setObjectName(u"verticalLayout_6")
        self.verticalLayout_5 = QVBoxLayout()
        self.verticalLayout_5.setObjectName(u"verticalLayout_5")
        self.lineEdit_search_file = QLineEdit(self.dockWidgetContents)
        self.lineEdit_search_file.setObjectName(u"lineEdit_search_file")
        self.lineEdit_search_file.setMinimumSize(QSize(270, 0))

        self.verticalLayout_5.addWidget(self.lineEdit_search_file)

        self.splitter_file_manager = QSplitter(self.dockWidgetContents)
        self.splitter_file_manager.setObjectName(u"splitter_file_manager")
        self.splitter_file_manager.setOrientation(Qt.Horizontal)
        self.splitter_file_manager.setHandleWidth(10)
        self.splitter_file_manager.setChildrenCollapsible(False)
        self.listWidget_search_file = MyConceptLinkedFileList(self.splitter_file_manager)
        self.listWidget_search_file.setObjectName(u"listWidget_search_file")
        self.listWidget_search_file.setDragEnabled(True)
        self.listWidget_search_file.setDragDropOverwriteMode(False)
        self.listWidget_search_file.setDragDropMode(QAbstractItemView.InternalMove)
        self.listWidget_search_file.setDefaultDropAction(Qt.CopyAction)
        self.listWidget_search_file.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.listWidget_search_file.setSpacing(5)
        self.listWidget_search_file.setSelectionRectVisible(True)
        self.splitter_file_manager.addWidget(self.listWidget_search_file)
        self.layoutWidget2 = QWidget(self.splitter_file_manager)
        self.layoutWidget2.setObjectName(u"layoutWidget2")
        self.verticalLayout_7 = QVBoxLayout(self.layoutWidget2)
        self.verticalLayout_7.setObjectName(u"verticalLayout_7")
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.lineEdit_date = QLineEdit(self.layoutWidget2)
        self.lineEdit_date.setObjectName(u"lineEdit_date")
        self.lineEdit_date.setEnabled(True)
        self.lineEdit_date.setMinimumSize(QSize(0, 0))
        self.lineEdit_date.setReadOnly(True)

        self.verticalLayout_7.addWidget(self.lineEdit_date)

        self.listWidget_file_related_concept = QListWidget(self.layoutWidget2)
        self.listWidget_file_related_concept.setObjectName(u"listWidget_file_related_concept")
        self.listWidget_file_related_concept.setDragEnabled(False)
        self.listWidget_file_related_concept.setDragDropOverwriteMode(False)
        self.listWidget_file_related_concept.setDragDropMode(QAbstractItemView.NoDragDrop)
        self.listWidget_file_related_concept.setDefaultDropAction(Qt.IgnoreAction)
        self.listWidget_file_related_concept.setSelectionMode(QAbstractItemView.ExtendedSelection)
        self.listWidget_file_related_concept.setMovement(QListView.Static)
        self.listWidget_file_related_concept.setFlow(QListView.LeftToRight)
        self.listWidget_file_related_concept.setResizeMode(QListView.Adjust)
        self.listWidget_file_related_concept.setSpacing(5)
        self.listWidget_file_related_concept.setViewMode(QListView.IconMode)
        self.listWidget_file_related_concept.setWordWrap(False)
        self.listWidget_file_related_concept.setSelectionRectVisible(True)

        self.verticalLayout_7.addWidget(self.listWidget_file_related_concept)

        self.splitter_file_manager.addWidget(self.layoutWidget2)

        self.verticalLayout_5.addWidget(self.splitter_file_manager)


        self.verticalLayout_6.addLayout(self.verticalLayout_5)

        self.dockWidget_library.setWidget(self.dockWidgetContents)
        dongli_teahouse_studio_window.addDockWidget(Qt.TopDockWidgetArea, self.dockWidget_library)
        self.menubar = QMenuBar(dongli_teahouse_studio_window)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1127, 22))
        self.menuView = QMenu(self.menubar)
        self.menuView.setObjectName(u"menuView")
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuExport_2 = QMenu(self.menuFile)
        self.menuExport_2.setObjectName(u"menuExport_2")
        self.menuExport_2.setIcon(icon18)
        self.menuEdit = QMenu(self.menubar)
        self.menuEdit.setObjectName(u"menuEdit")
        self.menuTool = QMenu(self.menuEdit)
        self.menuTool.setObjectName(u"menuTool")
        self.menuTool.setIcon(icon29)
        self.menuConcept = QMenu(self.menuEdit)
        self.menuConcept.setObjectName(u"menuConcept")
        icon34 = QIcon()
        icon34.addFile(u":/icon/hash.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.menuConcept.setIcon(icon34)
        self.menuFile_2 = QMenu(self.menuEdit)
        self.menuFile_2.setObjectName(u"menuFile_2")
        icon35 = QIcon()
        icon35.addFile(u":/icon/inbox.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.menuFile_2.setIcon(icon35)
        self.menuRSS = QMenu(self.menuEdit)
        self.menuRSS.setObjectName(u"menuRSS")
        self.menuRSS.setIcon(icon16)
        self.menuZen = QMenu(self.menuEdit)
        self.menuZen.setObjectName(u"menuZen")
        self.menuZen.setIcon(icon30)
        self.menuAbout = QMenu(self.menubar)
        self.menuAbout.setObjectName(u"menuAbout")
        self.menuTab = QMenu(self.menubar)
        self.menuTab.setObjectName(u"menuTab")
        dongli_teahouse_studio_window.setMenuBar(self.menubar)
        self.dockWidget_sticker = QDockWidget(dongli_teahouse_studio_window)
        self.dockWidget_sticker.setObjectName(u"dockWidget_sticker")
        self.dockWidgetContents_2 = QWidget()
        self.dockWidgetContents_2.setObjectName(u"dockWidgetContents_2")
        self.horizontalLayout = QHBoxLayout(self.dockWidgetContents_2)
        self.horizontalLayout.setObjectName(u"horizontalLayout")
        self.plainTextEdit_sticker = QPlainTextEdit(self.dockWidgetContents_2)
        self.plainTextEdit_sticker.setObjectName(u"plainTextEdit_sticker")

        self.horizontalLayout.addWidget(self.plainTextEdit_sticker)

        self.dockWidget_sticker.setWidget(self.dockWidgetContents_2)
        dongli_teahouse_studio_window.addDockWidget(Qt.TopDockWidgetArea, self.dockWidget_sticker)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuTab.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())
        self.menuView.addAction(self.actionToggle_Fullscreen)
        self.menuView.addAction(self.actionStay_on_Top)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave_Data)
        self.menuFile.addAction(self.menuExport_2.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSetting)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuExport_2.addAction(self.actionExport_Concept_Data_to_Json)
        self.menuExport_2.addAction(self.actionExport_Diary_Data_to_Json)
        self.menuExport_2.addAction(self.actionExport_File_Data_to_Json)
        self.menuExport_2.addAction(self.actionExport_RSS_Data_to_Json)
        self.menuExport_2.addAction(self.actionExport_RSS_Tree_Data_to_Json)
        self.menuExport_2.addAction(self.actionExport_Zen_Data_to_Json)
        self.menuExport_2.addAction(self.actionExport_Zen_Tree_Data_to_Json)
        self.menuEdit.addAction(self.menuConcept.menuAction())
        self.menuEdit.addAction(self.menuTool.menuAction())
        self.menuEdit.addAction(self.menuFile_2.menuAction())
        self.menuEdit.addAction(self.menuRSS.menuAction())
        self.menuEdit.addAction(self.menuZen.menuAction())
        self.menuEdit.addAction(self.actionEdit)
        self.menuEdit.addAction(self.actionDelete)
        self.menuTool.addAction(self.actionSearch_Diary_Text)
        self.menuTool.addAction(self.actionAdd_New_Line)
        self.menuTool.addAction(self.actionLink_Concept_to_Line)
        self.menuTool.addAction(self.actionAnalyze_Diary_with_Concept)
        self.menuConcept.addAction(self.actionSearch_Concept)
        self.menuConcept.addAction(self.actionCreate_Concept)
        self.menuConcept.addSeparator()
        self.menuConcept.addAction(self.actionAdd_Concept_To_Parent)
        self.menuConcept.addAction(self.actionAdd_Concept_To_Child)
        self.menuConcept.addAction(self.actionAdd_Concept_To_Relative)
        self.menuConcept.addSeparator()
        self.menuFile_2.addAction(self.actionSearch_File_Library)
        self.menuFile_2.addAction(self.actionLocate_File_in_File_Library)
        self.menuFile_2.addAction(self.actionFile_Check)
        self.menuRSS.addAction(self.actionCreate_RSS_Folder)
        self.menuRSS.addAction(self.actionAdd_RSS_Feed)
        self.menuRSS.addAction(self.actionOpen_WebPage_In_Browser)
        self.menuRSS.addAction(self.actionUpdate_Feed_Manually)
        self.menuRSS.addAction(self.actionStart_Daily_Update_Manually)
        self.menuZen.addAction(self.actionCreate_Zen_Folder)
        self.menuZen.addAction(self.actionAdd_Zen_Segment)
        self.menuZen.addAction(self.actionSwitch_between_View_Edit)
        self.menuAbout.addAction(self.actionAbout)
        self.menuTab.addAction(self.actionCreate_New_Tab)
        self.menuTab.addAction(self.actionHide_Current_Tab)
        self.menuTab.addAction(self.actionDelete_Current_Tab)

        self.retranslateUi(dongli_teahouse_studio_window)

        self.tabWidget.setCurrentIndex(0)
        self.stackedWidget_zen.setCurrentIndex(0)
        self.toolBox_text.setCurrentIndex(0)
        self.toolBox_text.layout().setSpacing(0)
        self.toolBox_concept.setCurrentIndex(0)
        self.toolBox_concept.layout().setSpacing(0)


        QMetaObject.connectSlotsByName(dongli_teahouse_studio_window)
    # setupUi

    def retranslateUi(self, dongli_teahouse_studio_window):
        dongli_teahouse_studio_window.setWindowTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"Dongli Teahouse Studio", None))
        self.actionCreate_Concept.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Create Concept", None))
#if QT_CONFIG(tooltip)
        self.actionCreate_Concept.setToolTip(QCoreApplication.translate("dongli_teahouse_studio_window", u"Create Concept", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionCreate_Concept.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"Ctrl+N", None))
#endif // QT_CONFIG(shortcut)
        self.actionAdd_New_Line.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Add New Line", None))
#if QT_CONFIG(shortcut)
        self.actionAdd_New_Line.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"Ctrl+D", None))
#endif // QT_CONFIG(shortcut)
        self.actionLink_Concept_to_Line.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Link Concept to Line", None))
#if QT_CONFIG(tooltip)
        self.actionLink_Concept_to_Line.setToolTip(QCoreApplication.translate("dongli_teahouse_studio_window", u"Link Concept to Line", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionLink_Concept_to_Line.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"Ctrl+E", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_Data.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Save Data", None))
#if QT_CONFIG(tooltip)
        self.actionSave_Data.setToolTip(QCoreApplication.translate("dongli_teahouse_studio_window", u"Save Data", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionSave_Data.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionDelete.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Delete", None))
#if QT_CONFIG(tooltip)
        self.actionDelete.setToolTip(QCoreApplication.translate("dongli_teahouse_studio_window", u"All sorts of deleting operating depending on which widget you are focusing on.", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionDelete.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"Del", None))
#endif // QT_CONFIG(shortcut)
        self.actionAdd_Concept_To_Parent.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Add Concept To Parent", None))
#if QT_CONFIG(shortcut)
        self.actionAdd_Concept_To_Parent.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"Ctrl+1", None))
#endif // QT_CONFIG(shortcut)
        self.actionAdd_Concept_To_Child.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Add Concept To Child", None))
#if QT_CONFIG(tooltip)
        self.actionAdd_Concept_To_Child.setToolTip(QCoreApplication.translate("dongli_teahouse_studio_window", u"Add Concept To Child", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionAdd_Concept_To_Child.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"Ctrl+2", None))
#endif // QT_CONFIG(shortcut)
        self.actionAdd_Concept_To_Relative.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Add Concept To Relative", None))
#if QT_CONFIG(tooltip)
        self.actionAdd_Concept_To_Relative.setToolTip(QCoreApplication.translate("dongli_teahouse_studio_window", u"Add Concept To Relative", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionAdd_Concept_To_Relative.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"Ctrl+3", None))
#endif // QT_CONFIG(shortcut)
        self.actionToggle_Fullscreen.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Toggle Fullscreen", None))
#if QT_CONFIG(shortcut)
        self.actionToggle_Fullscreen.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"F11", None))
#endif // QT_CONFIG(shortcut)
        self.actionExit.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Exit", None))
#if QT_CONFIG(shortcut)
        self.actionExit.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"Ctrl+W", None))
#endif // QT_CONFIG(shortcut)
        self.actionAbout.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"About", None))
        self.actionSearch_Concept.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Search Concept", None))
#if QT_CONFIG(shortcut)
        self.actionSearch_Concept.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"Ctrl+R", None))
#endif // QT_CONFIG(shortcut)
        self.actionImport_File_Tree_to_Concept.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Import File Tree to Concept", None))
#if QT_CONFIG(tooltip)
        self.actionImport_File_Tree_to_Concept.setToolTip(QCoreApplication.translate("dongli_teahouse_studio_window", u"Import File Tree to Concept", None))
#endif // QT_CONFIG(tooltip)
        self.actionCreate_New_Tab.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Create New Tab", None))
        self.actionHide_Current_Tab.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Hide Current Tab", None))
        self.actionDelete_Current_Tab.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Delete Current Tab", None))
        self.actionCreate_RSS_Folder.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Create RSS Folder", None))
        self.actionAdd_RSS_Feed.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Add RSS Feed", None))
#if QT_CONFIG(tooltip)
        self.actionAdd_RSS_Feed.setToolTip(QCoreApplication.translate("dongli_teahouse_studio_window", u"Add RSS Feed", None))
#endif // QT_CONFIG(tooltip)
        self.actionOpen_WebPage_In_Browser.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Open WebPage In Browser", None))
#if QT_CONFIG(shortcut)
        self.actionOpen_WebPage_In_Browser.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"F10", None))
#endif // QT_CONFIG(shortcut)
        self.actionExport_Concept_Data_to_Json.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Export Concept Data to Json", None))
        self.actionExport_Diary_Data_to_Json.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Export Diary Data to Json", None))
        self.actionExport_RSS_Data_to_Json.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Export RSS Data to Json", None))
        self.actionSetting.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Setting", None))
        self.actionFile_Check.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"File Check", None))
#if QT_CONFIG(tooltip)
        self.actionFile_Check.setToolTip(QCoreApplication.translate("dongli_teahouse_studio_window", u"File Check", None))
#endif // QT_CONFIG(tooltip)
        self.actionExport_File_Data_to_Json.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Export File Data to Json", None))
#if QT_CONFIG(tooltip)
        self.actionExport_File_Data_to_Json.setToolTip(QCoreApplication.translate("dongli_teahouse_studio_window", u"Export File Data to Json", None))
#endif // QT_CONFIG(tooltip)
        self.actionEdit.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Edit", None))
#if QT_CONFIG(tooltip)
        self.actionEdit.setToolTip(QCoreApplication.translate("dongli_teahouse_studio_window", u"Edit", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionEdit.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"F2", None))
#endif // QT_CONFIG(shortcut)
        self.actionUpdate_Feed_Manually.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Update Feed Manually", None))
#if QT_CONFIG(tooltip)
        self.actionUpdate_Feed_Manually.setToolTip(QCoreApplication.translate("dongli_teahouse_studio_window", u"Update Feed Manually", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionUpdate_Feed_Manually.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"F4", None))
#endif // QT_CONFIG(shortcut)
        self.actionSearch_Diary_Text.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Search Diary Text", None))
#if QT_CONFIG(shortcut)
        self.actionSearch_Diary_Text.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"Ctrl+F", None))
#endif // QT_CONFIG(shortcut)
        self.actionSearch_File_Library.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Search File Library", None))
#if QT_CONFIG(shortcut)
        self.actionSearch_File_Library.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.actionLocate_File_in_File_Library.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Locate File in File Library", None))
#if QT_CONFIG(shortcut)
        self.actionLocate_File_in_File_Library.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"F3", None))
#endif // QT_CONFIG(shortcut)
        self.actionExport_RSS_Tree_Data_to_Json.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Export RSS Tree Data to Json", None))
        self.actionStay_on_Top.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Stay on Top", None))
        self.actionAnalyze_Diary_with_Concept.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Analyze Diary with Concept", None))
        self.actionStart_Daily_Update_Manually.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Start Daily Update Manually", None))
#if QT_CONFIG(tooltip)
        self.actionStart_Daily_Update_Manually.setToolTip(QCoreApplication.translate("dongli_teahouse_studio_window", u"Start Daily Update Manually", None))
#endif // QT_CONFIG(tooltip)
        self.actionCreate_Zen_Folder.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Create Zen Folder", None))
        self.actionAdd_Zen_Segment.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Add Zen Segment", None))
        self.actionSwitch_between_View_Edit.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Switch between View\\Edit", None))
#if QT_CONFIG(shortcut)
        self.actionSwitch_between_View_Edit.setShortcut(QCoreApplication.translate("dongli_teahouse_studio_window", u"F9", None))
#endif // QT_CONFIG(shortcut)
        self.actionExport_Zen_Data_to_Json.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Export Zen Data to Json", None))
        self.actionExport_Zen_Tree_Data_to_Json.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Export Zen Tree Data to Json", None))
        self.label_home.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Home", None))
        self.label.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Welcome", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabWidgetPage_home), QCoreApplication.translate("dongli_teahouse_studio_window", u"Home", None))
        ___qtreewidgetitem = self.treeWidget_rss.headerItem()
        ___qtreewidgetitem.setText(0, QCoreApplication.translate("dongli_teahouse_studio_window", u"1", None));
#if QT_CONFIG(statustip)
        self.treeWidget_rss.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabWidgetPage_rss), QCoreApplication.translate("dongli_teahouse_studio_window", u"RSS", None))
        self.textEdit_viewer.setHtml(QCoreApplication.translate("dongli_teahouse_studio_window", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:18pt;\"><br /></p></body></html>", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabWidgetPage_text), QCoreApplication.translate("dongli_teahouse_studio_window", u"Text", None))
        ___qtreewidgetitem1 = self.treeWidget_zen.headerItem()
        ___qtreewidgetitem1.setText(0, QCoreApplication.translate("dongli_teahouse_studio_window", u"1", None));
#if QT_CONFIG(statustip)
        self.treeWidget_zen.setStatusTip("")
#endif // QT_CONFIG(statustip)
        self.textEdit_viewer_zen.setHtml(QCoreApplication.translate("dongli_teahouse_studio_window", u"<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:'SimSun'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:18pt;\"><br /></p></body></html>", None))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tabWidgetPage_zen), QCoreApplication.translate("dongli_teahouse_studio_window", u"Zen", None))
        self.dockWidget_diary.setWindowTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"Diary", None))
        self.toolBox_text.setItemText(self.toolBox_text.indexOf(self.page_text_related_concept), QCoreApplication.translate("dongli_teahouse_studio_window", u"Text Related Concept", None))
        self.toolBox_text.setItemText(self.toolBox_text.indexOf(self.page_text_linked_file), QCoreApplication.translate("dongli_teahouse_studio_window", u"Text Linked File", None))
        self.dockWidget_concept.setWindowTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"Concept", None))
        self.label_id.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"ID", None))
        self.label_name.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Name", None))
        self.label_detail.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Detail", None))
        self.plainTextEdit_detail.setPlainText("")
        self.label_parent.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Parent", None))
        self.label_child.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Child", None))
        self.label_relative.setText(QCoreApplication.translate("dongli_teahouse_studio_window", u"Relative", None))
        self.toolBox_concept.setItemText(self.toolBox_concept.indexOf(self.page_concept_related_text), QCoreApplication.translate("dongli_teahouse_studio_window", u"Concept Related Text", None))
        self.toolBox_concept.setItemText(self.toolBox_concept.indexOf(self.page_concept_linked_file), QCoreApplication.translate("dongli_teahouse_studio_window", u"Concept Linked File", None))
        self.dockWidget_library.setWindowTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"Library", None))
        self.menuView.setTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"View", None))
        self.menuFile.setTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"File", None))
        self.menuExport_2.setTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"Export to Json", None))
        self.menuEdit.setTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"Tool", None))
        self.menuTool.setTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"Diary", None))
        self.menuConcept.setTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"Concept", None))
        self.menuFile_2.setTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"File", None))
        self.menuRSS.setTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"RSS", None))
        self.menuZen.setTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"Zen", None))
        self.menuAbout.setTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"Help", None))
        self.menuTab.setTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"Tab", None))
        self.dockWidget_sticker.setWindowTitle(QCoreApplication.translate("dongli_teahouse_studio_window", u"Sticker", None))
    # retranslateUi

